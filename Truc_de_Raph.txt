Integer.toString(int)


public static void draw_poly (int n){
        int[][] Positions = new int[n][2];
        for(int i = 0; i < n; i++){
            Scanner sc = new Scanner(System.in);
            System.out.println("Saisissez l'abscisse x du sommet "+ i +" :");
            int a = sc.nextInt();
            System.out.println("Saisissez l'ordonnée y du sommet "+ i +" :");
            int b = sc.nextInt();
            Positions[i][0]=a;
            Positions[i][1]=b;
	
        }
        System.out.println(Positions);

    }

Version String :

public static void draw_poly (int n){
        String Positions = "";
        for(int i = 0; i < n; i++){
            Scanner sc = new Scanner(System.in);
            System.out.println("Saisissez l'abscisse x du sommet "+ i +" :");
            int a = sc.nextInt();
            System.out.println("Saisissez l'ordonnée y du sommet "+ i +" :");
            int b = sc.nextInt();
            Positions = Integer.toString(a) + ", " + Integer.toString(b)+", ";
            Positions = Positions.substring(0, Positions.length()-1);
        }
        System.out.println(Positions);

    }



---------------------------------------------------------------------------------------------------------------
Idées pour enveloppe convexe : 

Fonction pour déterminer de quel côté un point se situe par rapport à un segment orienté :
def point_segment(P1,P2,P):
    return (P2[0]-P1[0])*(P[1]-P1[1])-(P2[1]-P1[1])*(P[0]-P1[0])>0
           
Détermination des côtés de l'enveloppe convexe par la méthode directe :
def enveloppe_direct(points):
    enveloppe = []
    N = len(points)
    for i in range(N):
        for j in range(N):
            if i!=j:
                bord = True
                for k in range(N):
                    if k!=i and k!=j:
                        if point_segment(points[i],points[j],points[k]):
                            bord = False
                            break
                if bord:
                    enveloppe.append([points[i],points[j]])
    return enveloppe  


Récupérer les points d’un clic de souris :

Tu dois utiliser les méthodes getX() et getY() de la classe MouseEvent.

ou

Utiliser la méthode convertPointToScreen() de la classe javax.Swing.Utilities. Par ex :

MouseEvent event = …;
Component composant = …;
Point locationComposant = event.getPoint()
Point locationEcran = SwingUtilities.convertPointToScreen(locationComposant, composant);
(marche apparent pas tj)

ou

https://www.programmez.com/content/acquisition-des-coordonnees-de-la-souris-au-clic
(Ce lien semble clair)



-------------------------------------------------------------------------------------------------



	Vérifier que le point est dans le polygone :

//MX et MY sont les positions X et Y de la sourie



public boolean CreationContour(MX,MY,ploy){

Contour=[]        // On va lister tout les points du contour avec une abscisse entière
For (int k=1; k<=length(S)/2; k=k+2){
	x=S[k];
	y=S[k+1];
	Contour.append([x;y])
//On considère que la liste des coordonnées du polygones ressemblent à ça S = [x1;y1;x2;y2;...] avec  x1,y1 le sommet le plus bas puis x2,y2 le sommet qui suit dans le sens trigo, ect...

	if (S[k+2]-S[k] == 0){
while (x =! S[k+2]){x=x+1;Contour.append([x;y]);}}

// On distingue ensuite les cas selon a.
	
	a=(S[k+3]-S[k+1])/(S[k+2]-S[k])

	if (S[k+2]<S[k])){
		while ([x,y]!= [S(k+2),S(k+3)];){
			x=x-1
			y=y-a
			Contour.append([x;y])}

	
	else {
		while ([x,y]!= [S(k+2),S(k+3)];){
			x=x+1
			y=y+a
			Contour.append([x;y])}}


Y_bh=[]         // va recevoir le max et le min de l’abscisse recherchée
For X in C[:][0] {
	If (MX==X){Y_bh.append(Contour[index(X)][1])}

// On se place sur l’abscisse car, avec le code ci-dessus, on observe qu’il n’y a que des valeurs entières, ainsi, si le polygone existe à l’abscisse correspondante et qu’il ne correspond pas à un sommet, on trouvera forcément 2 ordonnées correspondantes. Et ce n’est pas réciproque. C’est du au fait qu’on additionne x par 1 ou -1 alors qu’on additionne y avec un nombre décimal ( a ou -a). Nous avons fait comme cela car dans le cas d’un bord horizontal, le dénominateur de a s'annule.

If (Y_bh[0]>Y_bh[1]){p=Y_hb[0];Y_hb[0]=Y_hb[1];Y_hb[1]=p;} // tri le bas at et le haut

If (Y_bh est_vide){return False} // car il n’y a pas de polygone pour l’abscisse du clic
Else{
	If (length(Y_bh)==1){False} // on considère le contour n’est pas dans le polygone car lors de formation de la liste Contour.
	Elif(MY > Y_bh[0] & MY < Y_bh[1]){return True} // le clic est entre le bord max et le bord min du polygone. (Strict puisque contour n’est pas dans le polygone)
	Else{return False} // le clic est au-dessus ou en-dessous du polygone
